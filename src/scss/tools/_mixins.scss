$sizes: 24;

$break-points: (
  screen-sm-max: 575.98px,
  screen-sm-min: 576px,
  screen-md-max: 767.98px,
  screen-md-min: 768px,
  screen-lg-max: 991.98px,
  screen-lg-min: 992px,
  screen-xl-max: 1079.98px,
  screen-xl-min: 1080px,
);

@mixin border-box-t {
  border: 1px solid red;
}

@mixin border-box($width, $style, $color) {
  border: $width $style $color;
}

@mixin margin-classes {
  @for $i from 1 through $sizes {
    $margin: $i * 0.25rem;
    /* margin #{$margin} */
    .m#{$i} {
      margin: $margin;
    }
    .ml#{$i} {
      margin-left: $margin;
    }
    .mr#{$i} {
      margin-right: $margin;
    }
    .mt#{$i} {
      margin-top: $margin;
    }
    .mb#{$i} {
      margin-bottom: $margin;
    }
    .mx#{$i} {
      margin-left: $margin;
      margin-right: $margin;
    }
    .my#{$i} {
      margin-top: $margin;
      margin-bottom: $margin;
    }
  }
}
@include margin-classes;

@mixin padding-classes {
  @for $i from 1 through $sizes {
    $padding: $i * 0.25rem;
    /* padding #{$padding} */
    .p#{$i} {
      padding: $padding;
    }
    .pl#{$i} {
      padding-left: $padding;
    }
    .pr#{$i} {
      padding-right: $padding;
    }
    .pt#{$i} {
      padding-top: $padding;
    }
    .pb#{$i} {
      padding-bottom: $padding;
    }
    .px#{$i} {
      padding-left: $padding;
      padding-right: $padding;
    }
    .py#{$i} {
      padding-top: $padding;
      padding-bottom: $padding;
    }
  }
}
@include padding-classes;

@mixin border-classes {
  @for $i from 1 through $sizes {
    $borderRadius: $i * 0.25rem;
    .br#{$i} {
      border-radius: $borderRadius;
    }
    .br-tl#{$i} {
      border-top-left-radius: $borderRadius;
    }
    .br-tr#{$i} {
      border-top-right-radius: $borderRadius;
    }
    .br-bl#{$i} {
      border-bottom-left-radius: $borderRadius;
    }
    .br-br#{$i} {
      border-bottom-right-radius: $borderRadius;
    }
    .br-t#{$i} {
      border-top-left-radius: $borderRadius;
      border-top-right-radius: $borderRadius;
    }
    .br-b#{$i} {
      border-bottom-left-radius: $borderRadius;
      border-bottom-right-radius: $borderRadius;
    }
  }
}
@include border-classes;

@mixin font-size($font-size, $line-height: auto) {
  font-size: $font-size;
  font-size: ($font-size / $base-font-size) * 1rem;

  @if $line-height == auto {
    line-height: ceil($font-size / $base-line-height) *
      ($base-line-height / $font-size);
  } @else {
    @if (
      type-of($line-height) ==
        number or
        $line-height ==
        inherit or
        $line-height ==
        normal
    ) {
      line-height: $line-height;
    } @else if ($line-height != none and $line-height != false) {
      @warn "D’oh! ‘#{$line-height}’ is not a valid value for `line-height`.";
    }
  }
}

// Extra small devices (portrait phones, less than 576px)
@mixin xs {
  @media (max-width: map-get($break-points, screen-sm-max)) {
    @content;
  }
}

// Small devices (landscape phones, 576px and up)
@mixin sm {
  @media (min-width: map-get($break-points, screen-sm-min)) and (max-width: map-get($break-points, screen-md-max)) {
    @content;
  }
}

// Medium devices (tablets, 768px and up)
@mixin md {
  @media (min-width: map-get($break-points, screen-md-min)) and (max-width: map-get($break-points, screen-lg-max)) {
    @content;
  }
}

// Large devices (desktops, 992px and up)
@mixin lg {
  @media (min-width: map-get($break-points, screen-lg-min)) and (max-width: map-get($break-points, screen-xl-max)) {
    @content;
  }
}

// Extra large devices (large desktops, 1200px and up)
@mixin xl {
  @media (min-width: map-get($break-points, screen-xl-min)) {
    @content;
  }
}

// Custom devices for width and height
@mixin rwd($width, $height) {
  @media (width: $width+"px") and (height: $height+"px") {
    @content;
  }
}

// Custom devices for width
@mixin rw($width) {
  @media (width: $width+"px") {
    @content;
  }
}

// Custom Range for inconvenient sizes
@mixin customRange($min, $max) {
  @media (min-width: $min+"px") and (max-width: $max+"px") {
    @content;
  }
}
